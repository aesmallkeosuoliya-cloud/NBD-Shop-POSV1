

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Expense, Supplier } from '../../types';
import { useLanguage } from '../../contexts/LanguageContext';
import Button from '../common/Button';
import Modal from '../common/Modal';
import ExpenseForm from './ExpenseForm';
import LoadingSpinner from '../common/LoadingSpinner';
import { addExpense, getExpenses, updateExpense, deleteExpense, getSuppliers, isFirebaseInitialized } from '../../services/firebaseService';
import Input from '../common/Input';
import { UI_COLORS, EXPENSE_CATEGORIES, ACCOUNTING_EXPENSE_CATEGORIES } from '../../constants';
import Card from '../common/Card';

declare var Swal: any; // For SweetAlert2

// Icons
const EditIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" /><path fillRule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clipRule="evenodd" /></svg>;
const DeleteIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" /></svg>;
const PlusIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4" /></svg>;
const InfoIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 inline-block ml-1 text-gray-400" viewBox="0 0 20 20" fill="currentColor"> <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" /> </svg>;

const formatCurrency = (value: number | null | undefined) => {
    if (typeof value !== 'number' || isNaN(value)) return '0.00';
    return value.toLocaleString('th-TH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
};

const ExpensesPage: React.FC = () => {
  const { t } = useLanguage();
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [supplierMap, setSupplierMap] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingExpense, setEditingExpense] = useState<Expense | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStartDate, setFilterStartDate] = useState('');
  const [filterEndDate, setFilterEndDate] = useState('');
  const [filterAccountingCategory, setFilterAccountingCategory] = useState('all');
  const [formLoading, setFormLoading] = useState(false);
  const [allAvailableCategories, setAllAvailableCategories] = useState<string[]>(EXPENSE_CATEGORIES);

  const fetchExpensesAndSuppliers = useCallback(async () => {
    if (!isFirebaseInitialized()) {
      console.warn("Firebase not ready.");
      return;
    }
    setIsLoading(true);
    try {
      const [fetchedExpenses, fetchedSuppliers] = await Promise.all([
        getExpenses(),
        getSuppliers()
      ]);
      
      setExpenses(fetchedExpenses.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime()));
      setSuppliers(fetchedSuppliers);

      const supMap: Record<string, string> = {};
      fetchedSuppliers.forEach(s => supMap[s.id] = s.name);
      setSupplierMap(supMap);

      const uniqueCategoriesFromExpenses = Array.from(new Set(fetchedExpenses.map(e => e.category)));
      const combinedCategories = Array.from(new Set([...EXPENSE_CATEGORIES, ...uniqueCategoriesFromExpenses])).sort();
      setAllAvailableCategories(combinedCategories);

    } catch (error) {
      console.error("Error fetching data:", error);
      Swal.fire(t('error'), t('errorOccurred'), 'error');
    } finally {
      setIsLoading(false);
    }
  }, [t]);

  useEffect(() => {
    fetchExpensesAndSuppliers();
  }, [fetchExpensesAndSuppliers]);

  const handleAddExpense = () => {
    setEditingExpense(null);
    setIsModalOpen(true);
  };

  const handleEditExpense = (expense: Expense) => {
    if (expense.relatedPurchaseId) {
        Swal.fire({
            icon: 'info',
            title: t('editAutoGeneratedExpenseInfo'),
            showConfirmButton: true,
        });
        return;
    }
    setEditingExpense(expense);
    setIsModalOpen(true);
  };

  const handleDeleteExpense = async (expense: Expense) => {
     if (expense.relatedPurchaseId) {
        Swal.fire({
            icon: 'info',
            title: t('deleteAutoGeneratedExpenseInfo'),
            showConfirmButton: true,
        });
        return;
    }
    const result = await Swal.fire({
      title: t('areYouSureDelete'),
      text: t('actionCannotBeUndone'),
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: UI_COLORS.danger,
      cancelButtonColor: UI_COLORS.secondary,
      confirmButtonText: t('delete'),
      cancelButtonText: t('cancel')
    });

    if (result.isConfirmed) {
      setFormLoading(true); // Use formLoading or a specific deleteLoading state
      try {
        await deleteExpense(expense.id);
        Swal.fire(t('deleted'), t('deleteSuccess'), 'success');
        fetchExpensesAndSuppliers(); 
      } catch (error) {
        console.error("Error deleting expense:", error);
        Swal.fire(t('error'), t('errorOccurred'), 'error');
      } finally {
        setFormLoading(false);
      }
    }
  };

  const handleSubmitForm = async (expenseData: Omit<Expense, 'id' | 'createdAt'>) => {
    setFormLoading(true);
    try {
      if (editingExpense && editingExpense.id) {
        await updateExpense(editingExpense.id, expenseData);
      } else {
        await addExpense(expenseData);
      }
      Swal.fire(t('success'), t('saveSuccess'), 'success');
      setIsModalOpen(false);
      fetchExpensesAndSuppliers(); 
    } catch (error) {
      console.error("Error saving expense:", error);
      Swal.fire(t('error'), t('errorOccurred'), 'error');
    } finally {
      setFormLoading(false);
    }
  };
  
  const filteredExpenses = useMemo(() => {
    return expenses.filter(e => {
        const searchLower = searchTerm.toLowerCase();
        const termMatch = searchTerm === '' ||
            e.category.toLowerCase().includes(searchLower) ||
            e.description.toLowerCase().includes(searchLower) ||
            (e.supplierId && supplierMap[e.supplierId]?.toLowerCase().includes(searchLower));
        
        const startDateMatch = !filterStartDate || new Date(e.date) >= new Date(filterStartDate);
        const endDateMatch = !filterEndDate || new Date(e.date) <= new Date(filterEndDate + 'T23:59:59.999Z');

        const accountingCategoryMatch = filterAccountingCategory === 'all' || e.accountingCategoryCode === parseInt(filterAccountingCategory, 10);

        return termMatch && startDateMatch && endDateMatch && accountingCategoryMatch;
    });
  }, [expenses, searchTerm, supplierMap, filterStartDate, filterEndDate, filterAccountingCategory]);


  const formatDate = (isoDate: string) => {
    return new Date(isoDate).toLocaleDateString(t('language') === 'lo' ? 'lo-LA' : 'th-TH', {
        year: 'numeric', month: 'short', day: 'numeric'
    });
  }
  
  const clearFilters = () => {
    setSearchTerm('');
    setFilterStartDate('');
    setFilterEndDate('');
    setFilterAccountingCategory('all');
  };

  return (
    <div className="p-4 md:p-6">
      <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
        <h1 className="text-2xl font-semibold text-gray-700">{t('expenses')}</h1>
        <Button onClick={handleAddExpense} variant="primary" leftIcon={<PlusIcon />} className="flex-shrink-0">
          {t('addNewExpense')}
        </Button>
      </div>

      <Card className="mb-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 items-end">
            <Input
                label={t('dateRangeStart')}
                type="date"
                value={filterStartDate}
                onChange={e => setFilterStartDate(e.target.value)}
                wrapperClassName="mb-0"
            />
            <Input
                label={t('dateRangeEnd')}
                type="date"
                value={filterEndDate}
                onChange={e => setFilterEndDate(e.target.value)}
                wrapperClassName="mb-0"
            />
            <Input
                label={t('search')}
                placeholder={t('search') + '...'}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                wrapperClassName="mb-0"
            />
            <div>
              <label htmlFor="accountingCategoryFilter" className="block text-sm font-medium text-gray-700 mb-1">{t('accountingCategory')}</label>
              <select id="accountingCategoryFilter" value={filterAccountingCategory} onChange={e => setFilterAccountingCategory(e.target.value)} className="mt-1 block w-full px-3 py-2.5 h-11 bg-white text-gray-900 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-purple-500 focus:border-purple-500 sm:text-sm">
                  <option value="all">{t('all')}</option>
                  {ACCOUNTING_EXPENSE_CATEGORIES.map(cat => <option key={cat.code} value={cat.code}>{t(cat.labelKey)}</option>)}
              </select>
            </div>
            <Button onClick={clearFilters} variant="outline" className="w-full h-10">{t('clearFilters')}</Button>
        </div>
      </Card>

      {isLoading && !expenses.length ? ( 
        <div className="flex justify-center items-center h-64">
          <LoadingSpinner text={t('loading')} />
        </div>
      ) : (
        <div className="bg-white shadow-xl rounded-lg overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('date')}</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('category')}</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('accountingCategory')}</th>
                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">{t('amount')}</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('details')}</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('supplier')}</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{t('notes')}</th>
                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">{t('actions')}</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredExpenses.map((expense) => (
                <tr key={expense.id} className="hover:bg-gray-50 transition-colors">
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">{formatDate(expense.date)}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{expense.category}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{expense.accountingCategoryName || '-'}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-800 font-semibold text-right">{formatCurrency(expense.amount)}</td>
                  <td className="px-6 py-4 whitespace-normal text-xs text-gray-500 max-w-sm ">{expense.description}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{expense.supplierId ? supplierMap[expense.supplierId] || t('deleted') : '-'}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-xs text-gray-500">
                    {expense.relatedPurchaseId ? (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                        {t('autoGeneratedExpense')}
                        <span title={t('relatedPurchase') + `: ${expense.relatedPurchaseId.substring(expense.relatedPurchaseId.length - 6)}`}>
                            <InfoIcon />
                        </span>
                      </span>
                    ) : (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        {t('manualExpense')}
                      </span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-1">
                    <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => handleEditExpense(expense)} 
                        className="text-blue-600 hover:text-blue-900 p-1" 
                        title={expense.relatedPurchaseId ? t('editAutoGeneratedExpenseInfo') : t('editExpense')}
                        disabled={!!expense.relatedPurchaseId && !formLoading} // Disable if auto-gen and not loading
                    >
                        <EditIcon />
                    </Button>
                    <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => handleDeleteExpense(expense)} 
                        className="text-red-600 hover:text-red-900 p-1" 
                        title={expense.relatedPurchaseId ? t('deleteAutoGeneratedExpenseInfo') : t('deleteExpense')}
                        disabled={!!expense.relatedPurchaseId && !formLoading} // Disable if auto-gen and not loading
                    >
                        <DeleteIcon />
                    </Button>
                  </td>
                </tr>
              ))}
              {filteredExpenses.length === 0 && !isLoading && (
                 <tr><td colSpan={8} className="text-center py-10 text-gray-500">{t('noDataFound')}</td></tr>
              )}
            </tbody>
          </table>
        </div>
      )}

      {isModalOpen && (
        <Modal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          title={editingExpense ? t('editExpense') : t('addNewExpense')}
          size="md"
        >
          <ExpenseForm
            initialData={editingExpense}
            onSubmit={handleSubmitForm}
            onCancel={() => setIsModalOpen(false)}
            isLoading={formLoading}
            availableCategories={allAvailableCategories}
          />
        </Modal>
      )}
    </div>
  );
};

export default ExpensesPage;
